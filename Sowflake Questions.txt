Question 1:
https://www.chegg.com/homework-help/questions-and-answers/python-solution-hackerrank-frequency-maximum-value-part-time-clerk-works-shop-n-items-avai-q51611074

Python:
price = [] #empty list price
query = [] #empty list query

n = int(input()) #taking input of n
for i in range(0,n): #loop from 0 to n to take input for price
x = int(input())
price.append(x)

m = int(input()) #taking input of m
for i in range(0,m): #loop from 0 to m to take input for query
x = int(input())
query.append(x)

for i in query: #traversing in query i.e for all elements in query
x = max(price[i-1:n]) #finding max elements from query element to n element
y = price[i-1:n].count(x) #finding count of x in price in range of same as to find max(x)
print(y) #printing(y) i.e desired output


Question 2:
https://www.chegg.com/homework-help/questions-and-answers/3-sorted-arrangement-container-open-ends-always-sorted-order-insert-element-position-deter-q97798274
Java:

public static long minimumOperations(List<Integer> numbers) {

        int total = 1;
        for (int i = 1; i < numbers.size(); i++) {
            int countLeft = 0;
            int countRight = 0;
            for (int j = 0; j < i; j++) {
                if (numbers.get(j) < numbers.get(i))
                    ++countLeft;
                else
                    ++countRight;
            }

            if (countLeft < countRight)
                total += (2 * countLeft) + 1;
            else
                total += (2 * countRight) + 1;

        }
        return total;
    }


Question 3:
Count of ways to split an Array into three contiguous Subarrays having increasing Sum.
Ans :
https://www.hackerrank.com/challenges/maxsubarray/problem

https://www.geeksforgeeks.org/count-of-ways-to-split-an-array-into-three-contiguous-subarrays-having-increasing-sum/




Question 4:   Maximize array elements upto given number
https://morioh.com/p/ea0f7dcf510b

https://www.hackerrank.com/challenges/max-array-sum/problem